From 3137ddc05f5290e050a2d23121b2769d72838c5a Mon Sep 17 00:00:00 2001
From: leo Wong <wongls0808@gmail.com>
Date: Tue, 7 Oct 2025 00:43:42 +0800
Subject: [PATCH] =?UTF-8?q?=E5=85=A8=E9=9D=A2=E9=87=8D=E6=9E=84=E6=A8=A1?=
 =?UTF-8?q?=E6=9D=BF=E7=BC=96=E8=BE=91=E5=99=A8=EF=BC=9A=E8=A7=A3=E5=86=B3?=
 =?UTF-8?q?=E7=94=BB=E5=B8=83=E6=98=BE=E7=A4=BA=E9=97=AE=E9=A2=98=EF=BC=8C?=
 =?UTF-8?q?=E6=94=B9=E8=BF=9B=E5=B8=83=E5=B1=80=E4=B8=8E=E4=BA=A4=E4=BA=92?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/components/account/TemplateBuilder.vue | 1453 +++++++++++++-------
 1 file changed, 931 insertions(+), 522 deletions(-)

diff --git a/src/components/account/TemplateBuilder.vue b/src/components/account/TemplateBuilder.vue
index 7d0246b..7e65a61 100644
--- a/src/components/account/TemplateBuilder.vue
+++ b/src/components/account/TemplateBuilder.vue
@@ -13,10 +13,10 @@
         <el-divider direction="vertical" />
         <span class="toolbar-label">缩放：</span>
         <el-button size="small" @click="zoomOut">-</el-button>
-        <el-button size="small" @click="zoomReset">100%</el-button>
+        <el-button size="small">{{ Math.round(zoom * 100) }}%</el-button>
         <el-button size="small" @click="zoomIn">+</el-button>
-  <el-button size="small" @click="fitToWidth">适配宽度</el-button>
-  <el-button size="small" @click="fitToPage">整页</el-button>
+        <el-button size="small" @click="fitToWidth">适配宽度</el-button>
+        <el-button size="small" @click="fitToPage">整页</el-button>
         <el-divider direction="vertical" />
         <span class="toolbar-label">网格：</span>
         <el-switch v-model="showGrid" active-text="显示" inactive-text="隐藏" @change="applyGrid" />
@@ -37,25 +37,44 @@
         <input type="color" v-model="fontColor" @change="applyFontColor" class="color-input" />
       </div>
     </div>
-    <div class="builder-body">
-      <div class="side">
-        <div ref="blocksHost" class="blocks-host"></div>
+    
+    <!-- 主编辑区域 -->
+    <div class="builder-main-area">
+      <!-- 左侧组件栏 -->
+      <div class="builder-sidebar">
+        <div ref="blocksPanel" class="blocks-panel"></div>
       </div>
-      <div class="main">
-        <div v-if="loading" class="loading">正在加载可视化编辑器…</div>
-        <div v-else-if="loadError" class="load-error">
-          <p>可视化编辑器加载失败：{{ loadError }}</p>
-          <p>请检查网络连接或使用离线方案：</p>
-          <ol>
-            <li>在项目的 <code>public/libs/grapesjs/</code> 目录放入 <code>grapes.min.js</code> 与 <code>css/grapes.min.css</code>。</li>
-            <li>刷新页面后，将优先从本地加载，无需外网。</li>
-          </ol>
-          <p>你仍可切换至“源码”模式继续编辑。</p>
+      
+      <!-- 中央画布区域 -->
+      <div class="builder-canvas-container">
+        <!-- 加载和错误状态 -->
+        <div v-if="loading" class="editor-status-overlay loading-overlay">
+          <div class="status-content">
+            <div class="spinner"></div>
+            <p>正在加载可视化编辑器...</p>
+          </div>
+        </div>
+        <div v-else-if="loadError" class="editor-status-overlay error-overlay">
+          <div class="status-content">
+            <div class="error-icon">!</div>
+            <h3>加载失败</h3>
+            <p>{{ loadError }}</p>
+            <p>请检查网络连接或使用离线资源：</p>
+            <ul>
+              <li>在项目的 <code>public/libs/grapesjs/</code> 目录放入 <code>grapes.min.js</code> 与 <code>css/grapes.min.css</code></li>
+              <li>刷新页面后将优先从本地加载</li>
+            </ul>
+          </div>
         </div>
-        <div v-else ref="editorHost" class="gjs-editor-host" :style="{height: editorHeight + 'px'}"></div>
-        <div class="height-slider">
+        
+        <!-- 编辑器容器 -->
+        <div ref="editorContainer" class="editor-container"></div>
+        
+        <!-- 高度控制 -->
+        <div class="canvas-height-control">
           <span>画布高度：</span>
-          <el-slider v-model="editorHeight" :min="600" :max="1400" :step="50" show-stops style="width: 260px" />
+          <el-slider v-model="editorHeight" :min="600" :max="1600" :step="50" show-stops style="width:240px" />
+          <span>{{ editorHeight }}px</span>
         </div>
       </div>
     </div>
@@ -63,8 +82,11 @@
 </template>
 
 <script setup>
-import { ref, onMounted, onBeforeUnmount, watch, defineExpose, nextTick } from 'vue';
+import { ref, onMounted, onBeforeUnmount, watch, nextTick, defineExpose } from 'vue';
 
+// =====================================
+// 属性和事件
+// =====================================
 const props = defineProps({
   modelValue: { type: String, default: '' },
   paperSize: { type: String, default: 'A4' }
@@ -72,609 +94,996 @@ const props = defineProps({
 
 const emit = defineEmits(['update:modelValue']);
 
-const editorHost = ref(null);
-const blocksHost = ref(null);
-let editor = null;
+// =====================================
+// 状态变量
+// =====================================
+const editorContainer = ref(null);
+const blocksPanel = ref(null);
 const loading = ref(true);
 const loadError = ref('');
-const TOKENS = {
-  invoiceItems: '{{invoice_items}}',
-  logo: '<img src="{{company_logo}}" alt="LOGO" style="height:48px"/>',
-  seal: '<img src="{{company_seal}}" alt="SEAL" style="height:72px"/>',
-  signature: '<img src="{{signature}}" alt="SIGN" style="height:36px"/>'
-};
+let editor = null;
 
-// 画布缩放与辅助编辑
-const zoom = ref(100);
+// 画布设置
 const editorHeight = ref(800);
-
-// 监听编辑器高度变化
-watch(() => editorHeight.value, (newHeight) => {
-  if (editor && editor.setDragMode) {
-    editor.setHeight(newHeight + 'px');
-    setTimeout(() => {
-      applyPaperSize(props.paperSize);
-      fitToWidth();
-    }, 100);
-  }
-});
+const zoom = ref(1);
 const showGrid = ref(false);
 const snapToGrid = ref(false);
 const gridSize = ref(10);
+
+// 文本编辑设置
 const fontFamily = ref("Arial, Helvetica, sans-serif");
 const fontSize = ref(12);
 const fontColor = ref('#333333');
 
-function loadGrapes() {
-  const sources = [
-    // 本地优先（需将文件放到 public/libs/grapesjs/ 下）
-    {
-      js: '/libs/grapesjs/grapes.min.js',
-      css: '/libs/grapesjs/css/grapes.min.css'
-    },
-    // 国内镜像（可能更稳定）
-    {
-      js: 'https://registry.npmmirror.com/grapesjs/0.21.5/files/dist/grapes.min.js',
-      css: 'https://registry.npmmirror.com/grapesjs/0.21.5/files/dist/css/grapes.min.css'
-    },
-    // 其他公共 CDN 兜底
-    {
-      js: 'https://cdn.jsdelivr.net/npm/grapesjs@0.21.5/dist/grapes.min.js',
-      css: 'https://cdn.jsdelivr.net/npm/grapesjs@0.21.5/dist/css/grapes.min.css'
-    },
-    {
-      js: 'https://unpkg.com/grapesjs@0.21.5/dist/grapes.min.js',
-      css: 'https://unpkg.com/grapesjs@0.21.5/dist/css/grapes.min.css'
-    }
-  ];
-
-  const waitCss = (href) => new Promise((resolve) => {
-    // 若已存在并完成加载，直接 resolve
-    const existing = Array.from(document.styleSheets).find(s => (s.href || '').includes(href));
-    if (existing) return resolve(true);
-    const link = document.querySelector(`link[data-grapesjs][href="${href}"]`);
-    if (link) {
-      link.addEventListener('load', () => resolve(true), { once: true });
-      // 最长等待 3s，防止卡死
-      setTimeout(() => resolve(false), 3000);
-      return;
+// 令牌（占位符）
+const TOKENS = {
+  invoiceItems: '{{invoice_items}}',
+  logo: '<img src="{{company_logo}}" alt="LOGO" style="max-height:48px;"/>',
+  seal: '<img src="{{company_seal}}" alt="SEAL" style="max-height:72px;"/>',
+  signature: '<img src="{{signature}}" alt="SIGN" style="max-height:36px;"/>'
+};
+
+// =====================================
+// GrapesJS 加载
+// =====================================
+
+// 加载GrapesJS及其依赖项
+async function loadGrapesJS() {
+  try {
+    // 优先尝试本地资源
+    const localJS = '/libs/grapesjs/grapes.min.js';
+    const localCSS = '/libs/grapesjs/css/grapes.min.css';
+    
+    // 添加CSS
+    await loadCSS(localCSS).catch(() => {
+      console.warn('无法加载本地CSS，尝试CDN');
+      return loadCSS('https://unpkg.com/grapesjs@0.21.5/dist/css/grapes.min.css');
+    });
+    
+    // 添加JS
+    const grapesjs = await loadScript(localJS).catch(() => {
+      console.warn('无法加载本地JS，尝试CDN');
+      return loadScript('https://unpkg.com/grapesjs@0.21.5/dist/grapes.min.js');
+    });
+    
+    return window.grapesjs;
+  } catch (error) {
+    console.error('GrapesJS加载失败:', error);
+    throw new Error('无法加载编辑器资源，请检查网络连接或离线资源');
+  }
+}
+
+// 加载CSS文件
+function loadCSS(href) {
+  return new Promise((resolve, reject) => {
+    // 检查是否已经加载
+    const existingLink = document.querySelector(`link[href="${href}"]`);
+    if (existingLink) {
+      return resolve();
     }
-    resolve(false);
+    
+    const link = document.createElement('link');
+    link.rel = 'stylesheet';
+    link.href = href;
+    
+    link.onload = () => resolve();
+    link.onerror = () => reject(new Error(`无法加载样式: ${href}`));
+    
+    document.head.appendChild(link);
   });
+}
 
-  const tryLoad = (idx) => new Promise((resolve, reject) => {
-    if (window.grapesjs) return resolve(window.grapesjs);
-    if (idx >= sources.length) return reject(new Error('所有来源均加载失败'));
-    const { js, css } = sources[idx];
-    // 注入 CSS（避免重复相同 href）
-    if (!document.querySelector(`link[data-grapesjs][href="${css}"]`)) {
-      const link = document.createElement('link');
-      link.rel = 'stylesheet';
-      link.href = css;
-      link.setAttribute('data-grapesjs', '1');
-      document.head.appendChild(link);
+// 加载JavaScript文件
+function loadScript(src) {
+  return new Promise((resolve, reject) => {
+    // 检查是否已经加载
+    if (window.grapesjs) {
+      return resolve(window.grapesjs);
     }
-    // 注入 JS
-    const loadScript = () => {
-      const script = document.createElement('script');
-      script.src = js;
-      script.async = true;
-      script.defer = true;
-      script.setAttribute('data-grapesjs', '1');
-      script.onload = () => resolve(window.grapesjs);
-      script.onerror = () => {
-        // 尝试下一个来源
-        tryLoad(idx + 1).then(resolve).catch(reject);
-      };
-      document.body.appendChild(script);
+    
+    const script = document.createElement('script');
+    script.src = src;
+    script.async = true;
+    
+    script.onload = () => {
+      if (window.grapesjs) {
+        resolve(window.grapesjs);
+      } else {
+        reject(new Error('GrapesJS未正确加载到全局对象'));
+      }
     };
-    // 等待 CSS 基本完成再加载脚本（减少初始无样式闪烁/错乱）
-    waitCss(css).then(loadScript);
+    script.onerror = () => reject(new Error(`无法加载脚本: ${src}`));
+    
+    document.body.appendChild(script);
   });
-
-  return tryLoad(0);
-}
-
-function splitHtml(html) {
-  const res = { head: '', body: '' };
-  if (!html) return res;
-  const headM = html.match(/<head[^>]*>([\s\S]*?)<\/head>/i);
-  const bodyM = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
-  res.head = headM ? headM[1] : '';
-  if (bodyM) {
-    res.body = bodyM[1];
-  } else {
-    // 若没有完整文档结构，则将其视为 body 片段
-    const trimmed = String(html).trim();
-    res.body = trimmed;
-  }
-  return res;
 }
 
-function rebuildHtml(head, body, extraCss = '') {
-  const cssTag = extraCss && extraCss.trim().length > 0 ? `\n<style>\n${extraCss}\n</style>` : '';
-  return `<!doctype html>\n<html>\n<head>\n${head || ''}${cssTag}\n</head>\n<body>\n${body || ''}\n</body>\n</html>`;
+// =====================================
+// 编辑器初始化
+// =====================================
+
+// 初始化编辑器
+async function initEditor() {
+  try {
+    loading.value = true;
+    loadError.value = '';
+    
+    // 确保容器已渲染
+    await nextTick();
+    if (!editorContainer.value || !blocksPanel.value) {
+      throw new Error('编辑器容器未找到');
+    }
+    
+    // 加载GrapesJS
+    const grapesjs = await loadGrapesJS();
+    
+    // 解析现有HTML
+    const templateData = parseTemplate(props.modelValue);
+    
+    // 创建编辑器实例
+    editor = grapesjs.init({
+      container: editorContainer.value,
+      height: `${editorHeight.value}px`,
+      width: '100%',
+      // 不从元素加载内容，我们将手动设置
+      fromElement: false,
+      // 禁用存储
+      storageManager: false,
+      // 面板配置
+      panels: { defaults: [] },
+      // 区块管理器
+      blockManager: {
+        appendTo: blocksPanel.value
+      },
+      // 画布配置
+      canvas: {
+        styles: [],
+        scripts: [],
+        // 强制启用自动渲染
+        autoscroll: true,
+        autorender: true,
+        frameStyle: `
+          body {
+            background-color: #e9ecef;
+            margin: 0;
+            padding: 16px;
+            min-height: 100%;
+            box-sizing: border-box;
+            display: flex;
+            justify-content: center;
+            align-items: flex-start;
+          }
+          .page {
+            background: white;
+            box-shadow: 0 0 8px rgba(0,0,0,0.15);
+            margin: 0 auto;
+            position: relative;
+          }
+        `
+      },
+      // 选择器管理器
+      selectorManager: {
+        componentFirst: true
+      },
+      // 其他编辑器设置
+      devices: [
+        {
+          name: '桌面',
+          width: ''
+        }
+      ],
+    });
+    
+    // 配置区块
+    setupBlocks();
+    
+    // 设置内容
+    let initialContent = '';
+    if (templateData.body && templateData.body.includes('class="page"')) {
+      // 已有带page容器的内容
+      initialContent = templateData.body;
+    } else {
+      // 添加page容器包装
+      const content = templateData.body || '<p>点击左侧区块或顶部按钮添加内容</p>';
+      initialContent = `<div class="page">${content}</div>`;
+    }
+    
+    editor.setComponents(initialContent);
+    
+    // 绑定事件
+    setupEditorEvents(templateData.head);
+    
+    // 编辑器加载完成后
+    editor.on('load', () => {
+      console.log('编辑器加载完成');
+      
+      // 应用纸张尺寸
+      applyPaperSize();
+      
+      // 连续尝试调整视图，确保显示正确
+      setTimeout(fitToWidth, 100);
+      setTimeout(fitToWidth, 300);
+      setTimeout(fitToWidth, 500);
+    });
+    
+    // 立即应用纸张尺寸
+    applyPaperSize();
+    
+    loading.value = false;
+  } catch (error) {
+    console.error('初始化编辑器失败:', error);
+    loadError.value = error.message || '初始化失败';
+    loading.value = false;
+  }
 }
 
-function applyPaperSize(size) {
-  // 仅用于编辑器画布的可视尺寸（px 近似换算），不影响最终导出
-  const mm2px = (mm) => Math.round(mm * 3.78);
-  const sizes = {
-    A4: { w: mm2px(210), h: mm2px(297) },
-    A5: { w: mm2px(148), h: mm2px(210) },
-    B5: { w: mm2px(176), h: mm2px(250) },
-    '80mm': { w: mm2px(80), h: null },
-    '58mm': { w: mm2px(58), h: null }
+// 解析模板HTML
+function parseTemplate(html) {
+  const result = {
+    head: '',
+    body: ''
   };
-  const s = sizes[size] || sizes.A4;
-  const doc = editor?.Canvas?.getDocument?.();
-  if (!doc) return;
-  
-  // 全面重构画布和纸张尺寸，确保正常渲染
   
-  // 1. 确保 body 正确设置
-  const body = doc.body;
-  body.style.background = '#e9ecef'; 
-  body.style.margin = '0';
-  body.style.padding = '12px';
-  body.style.display = 'flex';
-  body.style.justifyContent = 'center';
-  body.style.alignItems = 'flex-start';
-  body.style.minWidth = '100%';
-  body.style.minHeight = '100%';
-  body.style.overflow = 'auto';
+  if (!html) return result;
   
-  // 2. 确保 .page 存在
-  let page = doc.querySelector('.page');
-  if (!page) {
-    // 如果不存在，创建并移入所有内容
-    page = doc.createElement('div');
-    page.className = 'page';
-    // 移入所有内容
-    while (body.firstChild && body.firstChild !== page) {
-      page.appendChild(body.firstChild);
+  try {
+    // 提取head内容
+    const headMatch = html.match(/<head[^>]*>([\s\S]*?)<\/head>/i);
+    if (headMatch) result.head = headMatch[1];
+    
+    // 提取body内容
+    const bodyMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
+    if (bodyMatch) {
+      result.body = bodyMatch[1];
+    } else {
+      // 无完整HTML结构，将整个内容视为body
+      result.body = html.trim();
     }
-    body.appendChild(page);
-  }
-  
-  // 3. 直接设置 .page 样式，确保可见
-  const pageW = s.w + 'px'; 
-  const pageH = s.h ? s.h + 'px' : 'auto';
-  page.style.width = pageW;
-  page.style.minHeight = pageH;
-  page.style.background = '#fff';
-  page.style.boxShadow = '0 0 0 1px #dcdfe6, 0 8px 24px rgba(0,0,0,0.12)';
-  page.style.padding = '12mm';
-  page.style.boxSizing = 'border-box';
-  page.style.position = 'relative';
-  page.style.margin = '0 auto';
-  
-  // 4. 注入全局样式
-  const styleId = 'page-size-style';
-  let styleEl = doc.getElementById(styleId);
-  const css = `.page{width:${pageW};min-height:${pageH};background:#fff;box-shadow:0 0 0 1px #dcdfe6,0 8px 24px rgba(0,0,0,0.12);padding:12mm;box-sizing:border-box;position:relative;margin:0 auto;}`;
-  
-  if (!styleEl) {
-    styleEl = doc.createElement('style');
-    styleEl.id = styleId;
-    styleEl.appendChild(doc.createTextNode(css));
-    doc.head.appendChild(styleEl);
-  } else {
-    styleEl.textContent = css;
+  } catch (error) {
+    console.warn('解析模板失败，将作为body内容处理', error);
+    result.body = html || '';
   }
   
-  // 5. 添加清晰的视觉标记，帮助识别页面
-  const markerId = 'page-debug-marker';
-  if (!doc.getElementById(markerId)) {
-    const marker = doc.createElement('div');
-    marker.id = markerId;
-    marker.style.position = 'absolute';
-    marker.style.top = '0';
-    marker.style.left = '0';
-    marker.style.right = '0';
-    marker.style.height = '3px';
-    marker.style.background = 'rgba(56, 128, 255, 0.8)';
-    marker.style.zIndex = '10000';
-    marker.style.pointerEvents = 'none';
-    page.appendChild(marker);
-  }
+  return result;
+}
+
+// 重建完整HTML
+function rebuildHtml(head, body, css = '') {
+  const cssTag = css && css.trim() ? `<style>\n${css}\n</style>` : '';
+  return `<!DOCTYPE html>
+<html>
+<head>
+  ${head || ''}
+  ${cssTag}
+</head>
+<body>
+  ${body || ''}
+</body>
+</html>`;
 }
 
-function initBlocks(ed) {
-  const bm = ed.BlockManager;
-  bm.add('title', {
+// =====================================
+// 编辑器配置
+// =====================================
+
+// 设置区块
+function setupBlocks() {
+  if (!editor) return;
+  
+  const bm = editor.BlockManager;
+  
+  // 基础元素
+  bm.add('heading', {
     label: '标题',
     category: '基础',
-    content: '<h1 style="margin:8px 0">INVOICE</h1>'
-  });
-  bm.add('text', {
-    label: '文字',
-    category: '基础',
-    content: '<p style="margin:6px 0">请输入文本...</p>'
-  });
-  bm.add('two-cols', {
-    label: '两列布局',
-    category: '布局',
-    content: '<div style="display:flex; gap:12px"><div style="flex:1">左列</div><div style="flex:1">右列</div></div>'
+    content: '<h2 style="margin:8px 0">标题文本</h2>',
+    attributes: { class: 'fa fa-header' }
   });
-  bm.add('input', {
-    label: '输入框',
+  
+  bm.add('paragraph', {
+    label: '段落',
     category: '基础',
-    content: '<input type="text" placeholder="输入文本" style="padding:6px 8px; width:100%; box-sizing:border-box" />'
+    content: '<p style="margin:6px 0">请输入文本内容...</p>',
   });
-  bm.add('rect', {
-    label: '矩形',
+  
+  bm.add('divider', {
+    label: '分隔线',
     category: '基础',
-    content: '<div style="width:100%; height:60px; border:1px solid #333; background:#f7f7f7"></div>'
+    content: '<hr style="border:none;border-top:1px solid #ccc;margin:12px 0" />',
   });
-  bm.add('line', {
-    label: '分割线',
-    category: '基础',
-    content: '<hr style="border:none;border-top:1px solid #333; margin:8px 0" />'
+  
+  // 布局元素
+  bm.add('two-columns', {
+    label: '两列布局',
+    category: '布局',
+    content: `
+      <div style="display:flex;width:100%;gap:16px">
+        <div style="flex:1">左侧内容</div>
+        <div style="flex:1">右侧内容</div>
+      </div>
+    `,
   });
-  bm.add('circle', {
-    label: '圆形',
-    category: '基础',
-    content: '<div style="width:60px; height:60px; border:1px solid #333; border-radius:50%; background:#f7f7f7"></div>'
+  
+  bm.add('three-columns', {
+    label: '三列布局',
+    category: '布局',
+    content: `
+      <div style="display:flex;width:100%;gap:12px">
+        <div style="flex:1">第一列</div>
+        <div style="flex:1">第二列</div>
+        <div style="flex:1">第三列</div>
+      </div>
+    `,
   });
+  
+  // 发票元素
   bm.add('item-table', {
     label: '明细表格',
     category: '发票',
-    content: '<table style="width:100%; border-collapse:collapse"><thead><tr><th style="border:1px solid #999;padding:6px">#</th><th style="border:1px solid #999;padding:6px">Product</th><th style="border:1px solid #999;padding:6px">Description</th><th style="border:1px solid #999;padding:6px">Qty</th><th style="border:1px solid #999;padding:6px">Unit</th><th style="border:1px solid #999;padding:6px">Unit Price</th><th style="border:1px solid #999;padding:6px">Tax Rate</th><th style="border:1px solid #999;padding:6px">Discount</th><th style="border:1px solid #999;padding:6px">Amount</th></tr></thead><tbody>{{invoice_items}}</tbody></table>'
+    content: `
+      <table style="width:100%;border-collapse:collapse">
+        <thead>
+          <tr>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">#</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">产品</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">描述</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">数量</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">单位</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">单价</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">税率</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">折扣</th>
+            <th style="border:1px solid #ddd;padding:6px;background:#f8f8f8">金额</th>
+          </tr>
+        </thead>
+        <tbody>{{invoice_items}}</tbody>
+      </table>
+    `,
   });
+  
   bm.add('logo', {
     label: '公司LOGO',
     category: '发票',
-    content: '<img src="{{company_logo}}" alt="Company Logo" style="height:48px" />'
+    content: TOKENS.logo,
   });
+  
   bm.add('seal', {
     label: '公司印章',
     category: '发票',
-    content: '<img src="{{company_seal}}" alt="Seal" style="height:72px" />'
+    content: TOKENS.seal,
   });
+  
   bm.add('signature', {
     label: '签名',
     category: '发票',
-    content: '<img src="{{signature}}" alt="Signature" style="height:36px" />'
+    content: TOKENS.signature,
+  });
+  
+  // 常用字段
+  bm.add('invoice-info', {
+    label: '发票信息',
+    category: '发票',
+    content: `
+      <div style="margin:6px 0">
+        <div>发票号: {{invoice_number}}</div>
+        <div>日期: {{invoice_date}}</div>
+        <div>到期日: {{due_date}}</div>
+      </div>
+    `,
+  });
+  
+  bm.add('customer-info', {
+    label: '客户信息',
+    category: '发票',
+    content: `
+      <div style="margin:6px 0">
+        <div><strong>客户信息</strong></div>
+        <div>{{customer_name}}</div>
+        <div>{{customer_address}}</div>
+        <div>电话: {{customer_phone}}</div>
+      </div>
+    `,
+  });
+  
+  bm.add('totals', {
+    label: '金额汇总',
+    category: '发票',
+    content: `
+      <table style="width:220px;border-collapse:collapse;margin-left:auto">
+        <tr>
+          <td style="text-align:left;padding:4px">小计:</td>
+          <td style="text-align:right;padding:4px">{{subtotal}}</td>
+        </tr>
+        <tr>
+          <td style="text-align:left;padding:4px">税额:</td>
+          <td style="text-align:right;padding:4px">{{tax_amount}}</td>
+        </tr>
+        <tr>
+          <td style="text-align:left;padding:4px">折扣:</td>
+          <td style="text-align:right;padding:4px">{{discount_amount}}</td>
+        </tr>
+        <tr style="font-weight:bold">
+          <td style="text-align:left;padding:4px;border-top:1px solid #ddd">合计:</td>
+          <td style="text-align:right;padding:4px;border-top:1px solid #ddd">{{total_amount}}</td>
+        </tr>
+      </table>
+    `,
   });
-  // 常用发票字段
-  bm.add('f-invoice-number', { label:'发票编号', category:'发票', content:'<div style="margin:4px 0">发票编号：{{invoice_number}}</div>'});
-  bm.add('f-invoice-date', { label:'开票日期', category:'发票', content:'<div style="margin:4px 0">开票日期：{{invoice_date}}</div>'});
-  bm.add('f-due-date', { label:'到期日期', category:'发票', content:'<div style="margin:4px 0">到期日期：{{due_date}}</div>'});
-  bm.add('f-status', { label:'状态', category:'发票', content:'<div style="margin:4px 0">状态：{{status}}</div>'});
-  bm.add('f-customer', { label:'客户信息', category:'发票', content:'<div style="margin:4px 0"><div>客户：{{customer_name}}</div><div>地址：{{customer_address}}</div><div>电话：{{customer_phone}}</div></div>'});
-  bm.add('f-account', { label:'公司/账套', category:'发票', content:'<div style="margin:4px 0">公司：{{account_set_name}}</div>'});
-  bm.add('f-totals', { label:'金额信息', category:'发票', content:'<table style="width:60%;border-collapse:collapse;margin-left:auto"><tr><th style="text-align:left;border:1px solid #999;padding:4px">小计</th><td style="border:1px solid #999;padding:4px">{{subtotal}}</td></tr><tr><th style="text-align:left;border:1px solid #999;padding:4px">税额</th><td style="border:1px solid #999;padding:4px">{{tax_amount}}</td></tr><tr><th style="text-align:left;border:1px solid #999;padding:4px">折扣</th><td style="border:1px solid #999;padding:4px">{{discount_amount}}</td></tr><tr><th style="text-align:left;border:1px solid #999;padding:4px">合计</th><td style="border:1px solid #999;padding:4px">{{total_amount}}</td></tr></table>'});
-}
-
-function bindEditorEvents(ed, initialHead) {
-  const updateOutput = () => {
-    const body = ed.getHtml();
-    const css = ed.getCss();
-    const full = rebuildHtml(initialHead, body, css);
-    emit('update:modelValue', full);
+}
+
+// 设置编辑器事件
+function setupEditorEvents(initialHead) {
+  if (!editor) return;
+  
+  // 内容变更时更新模型值
+  const updateModelValue = () => {
+    try {
+      // 获取编辑内容
+      const body = editor.getHtml();
+      const css = editor.getCss();
+      
+      // 重建完整HTML
+      const html = rebuildHtml(initialHead, body, css);
+      
+      // 发出更新事件
+      emit('update:modelValue', html);
+    } catch (error) {
+      console.error('更新模型值失败', error);
+    }
   };
-  ed.on('component:add', updateOutput);
-  ed.on('component:remove', updateOutput);
-  ed.on('component:update', updateOutput);
-  ed.on('style:property:update', updateOutput);
-  ed.on('canvas:drop', updateOutput);
-  ed.on('component:drag:end', (cmp) => {
-    if (!snapToGrid.value || !cmp) return;
-    const s = cmp.getStyle();
-    const gs = Math.max(5, gridSize.value || 10);
-    const round = (v) => {
-      const num = parseFloat(String(v).replace('px',''));
-      if (isNaN(num)) return v;
-      return Math.round(num / gs) * gs + 'px';
-    };
-    const next = {};
-    if (s.left) next.left = round(s.left);
-    if (s.top) next.top = round(s.top);
-    if (s.marginLeft) next.marginLeft = round(s.marginLeft);
-    if (s.marginTop) next.marginTop = round(s.marginTop);
-    Object.keys(next).length && cmp.addStyle(next);
+  
+  // 监听内容变化事件
+  editor.on('component:add', updateModelValue);
+  editor.on('component:remove', updateModelValue);
+  editor.on('component:update', updateModelValue);
+  editor.on('style:property:update', updateModelValue);
+  
+  // 网格吸附
+  editor.on('component:drag:end', (component) => {
+    if (!snapToGrid.value || !component) return;
+    
+    try {
+      const style = component.getStyle();
+      const gs = Math.max(5, gridSize.value);
+      
+      // 四舍五入到网格
+      const roundToGrid = (value) => {
+        if (!value) return value;
+        const numValue = parseFloat(value);
+        if (isNaN(numValue)) return value;
+        return Math.round(numValue / gs) * gs + 'px';
+      };
+      
+      // 计算吸附后的样式
+      const newStyle = {};
+      
+      if (style.left) newStyle.left = roundToGrid(style.left);
+      if (style.top) newStyle.top = roundToGrid(style.top);
+      if (style.marginLeft) newStyle.marginLeft = roundToGrid(style.marginLeft);
+      if (style.marginTop) newStyle.marginTop = roundToGrid(style.marginTop);
+      
+      // 应用新样式
+      if (Object.keys(newStyle).length > 0) {
+        component.addStyle(newStyle);
+      }
+    } catch (error) {
+      console.warn('网格吸附失败', error);
+    }
   });
 }
 
-// 监听窗口大小变化，自动调整编辑器布局
-const handleResize = () => {
-  if (editor) {
-    setTimeout(() => {
-      applyPaperSize(props.paperSize);
-      fitToWidth();
-    }, 100);
-  }
-};
+// =====================================
+// 页面与样式处理
+// =====================================
 
-onMounted(async () => {
-  // 添加窗口调整监听
-  window.addEventListener('resize', handleResize);
+// 应用纸张尺寸
+function applyPaperSize() {
+  if (!editor) return;
+  
   try {
-    const gjs = await loadGrapes();
-    // 先切换为非 loading，以便渲染容器节点
-    loading.value = false;
-    await nextTick();
-    if (!editorHost.value) {
-      throw new Error('editor container not found');
-    }
-    const { head, body } = splitHtml(props.modelValue);
-    editor = gjs.init({
-      container: editorHost.value,
-      height: editorHeight.value + 'px',
-      width: '100%',
-      fromElement: false,
-      storageManager: false,
-      selectorManager: { componentFirst: true },
-      styleManager: {},
-      layerManager: {},
-      // 将区块面板渲染到自定义左栏
-      blockManager: { appendTo: blocksHost.value },
-      // 移除默认右侧/顶部面板，避免遮挡与误触
-      panels: { defaults: [] },
-      canvas: {
-        styles: [],
-        scripts: [],
-        autorender: true,
-        frameStyle: `
-          body {
-            background-color: #e9ecef;
-            margin: 0;
-            padding: 12px;
-            display: flex;
-            justify-content: center;
-            min-height: 100%;
-          }
-        `
+    // 获取文档
+    const canvas = editor.Canvas;
+    const document = canvas.getDocument();
+    if (!document) return;
+    
+    // 获取尺寸配置
+    const size = props.paperSize || 'A4';
+    const paperSizes = {
+      'A4': { width: '210mm', height: '297mm' },
+      'A5': { width: '148mm', height: '210mm' },
+      'B5': { width: '176mm', height: '250mm' },
+      '80mm': { width: '80mm', height: 'auto' },
+      '58mm': { width: '58mm', height: 'auto' }
+    };
+    
+    const paperSize = paperSizes[size] || paperSizes['A4'];
+    
+    // 获取或创建页面容器
+    let pageEl = document.querySelector('.page');
+    if (!pageEl) {
+      // 创建页面元素
+      pageEl = document.createElement('div');
+      pageEl.className = 'page';
+      
+      // 移动所有内容到页面容器
+      const body = document.body;
+      while (body.firstChild && !body.firstChild.classList?.contains('page')) {
+        pageEl.appendChild(body.firstChild);
       }
-    });
-    initBlocks(editor);
-    // BlockManager 已通过 appendTo 绑定，无需手工 render
-    // 确保存在 .page 包裹用于可视化纸张
-    const initial = body && body.includes('class="page"')
-      ? body
-      : `<div class="page">${body || '<div style="padding:12px">从左侧拖拽区块或点击上方按钮插入占位内容</div>'}</div>`;
-    editor.setComponents(initial);
-    // 等编辑器加载完毕，再强制确保 page 包裹与尺寸
-    editor.on('load', () => {
-      console.log('GrapesJS 编辑器已完全加载');
-      applyPaperSize(props.paperSize);
-      // 连续多次尝试适配宽度，确保生效
-      setTimeout(() => fitToWidth(), 0);
-      setTimeout(() => fitToWidth(), 100);
-      setTimeout(() => fitToWidth(), 500);
-    });
-    applyPaperSize(props.paperSize);
-    bindEditorEvents(editor, head);
-    // 初始缩放
-    editor.Canvas.setZoom(zoom.value / 100);
-    // 应用网格（若开启）
+      
+      // 添加页面容器到文档
+      document.body.appendChild(pageEl);
+    }
+    
+    // 设置页面样式
+    pageEl.style.width = paperSize.width;
+    pageEl.style.minHeight = paperSize.height;
+    pageEl.style.padding = '12mm';
+    pageEl.style.boxSizing = 'border-box';
+    pageEl.style.margin = '0 auto';
+    pageEl.style.background = 'white';
+    pageEl.style.boxShadow = '0 0 8px rgba(0,0,0,0.15)';
+    pageEl.style.position = 'relative';
+    
+    // 添加视觉指示器（顶部蓝色边框）
+    const indicatorId = 'page-indicator';
+    let indicator = document.getElementById(indicatorId);
+    
+    if (!indicator) {
+      indicator = document.createElement('div');
+      indicator.id = indicatorId;
+      indicator.style.position = 'absolute';
+      indicator.style.top = '0';
+      indicator.style.left = '0';
+      indicator.style.right = '0';
+      indicator.style.height = '3px';
+      indicator.style.backgroundColor = '#409EFF';
+      indicator.style.zIndex = '9999';
+      pageEl.appendChild(indicator);
+    }
+    
+    // 应用网格（如果启用）
     applyGrid();
-    // 初始自适应宽度
-    // 连续多次尝试适配宽度，确保生效
-    setTimeout(() => {
-      applyPaperSize(props.paperSize);
-      fitToWidth();
-    }, 0);
-    setTimeout(() => {
-      applyPaperSize(props.paperSize);
-      fitToWidth();
-    }, 100);
-    setTimeout(() => {
-      applyPaperSize(props.paperSize);
-      fitToWidth();
-    }, 500);
-  } catch (e) {
-    console.error('加载可视化编辑器失败：', e);
-    loadError.value = e?.message || '未知错误';
-    loading.value = false;
+    
+    // 适应宽度
+    fitToWidth();
+  } catch (error) {
+    console.error('应用纸张尺寸失败', error);
   }
-});
+}
 
-function ensurePageWrapper(){
+// 应用网格
+function applyGrid() {
+  if (!editor) return;
+  
   try {
-    const doc = editor?.Canvas?.getDocument?.();
-    const body = editor?.Canvas?.getBody?.();
-    if (!doc || !body) return;
-    const hasPage = !!doc.querySelector('.page');
-    if (!hasPage) {
-      const wrapperHtml = `<div class="page"></div>`;
-      // 将现有内容移入 .page
-      const page = doc.createElement('div');
-      page.setAttribute('class', 'page');
-      while (body.firstChild) page.appendChild(body.firstChild);
-      body.appendChild(page);
+    const document = editor.Canvas.getDocument();
+    if (!document) return;
+    
+    const body = document.body;
+    
+    if (showGrid.value) {
+      // 设置网格大小
+      const size = Math.max(5, gridSize.value);
+      
+      // 创建网格背景
+      const gridBg = `
+        linear-gradient(to right, rgba(0,0,0,0.05) 1px, transparent 1px),
+        linear-gradient(to bottom, rgba(0,0,0,0.05) 1px, transparent 1px)
+      `;
+      
+      // 应用网格样式
+      body.style.backgroundImage = gridBg;
+      body.style.backgroundSize = `${size}px ${size}px`;
+    } else {
+      // 移除网格样式
+      body.style.backgroundImage = '';
+      body.style.backgroundSize = '';
     }
-  } catch(_e) {}
+  } catch (error) {
+    console.warn('应用网格失败', error);
+  }
 }
 
-onBeforeUnmount(() => {
-  // 移除事件监听
-  window.removeEventListener('resize', handleResize);
+// 适应宽度
+function fitToWidth() {
+  if (!editor) return;
   
-  // 清理编辑器资源
-  if (editor) {
-    editor.destroy();
-    editor = null;
+  try {
+    // 获取页面元素
+    const document = editor.Canvas.getDocument();
+    if (!document) return;
+    
+    const pageEl = document.querySelector('.page');
+    if (!pageEl) {
+      console.warn('页面元素不存在，无法适应宽度');
+      return;
+    }
+    
+    // 获取容器和页面宽度
+    const containerWidth = editorContainer.value.clientWidth;
+    const pageWidth = pageEl.offsetWidth;
+    
+    if (containerWidth <= 0 || pageWidth <= 0) {
+      console.warn('容器或页面宽度无效', { containerWidth, pageWidth });
+      return;
+    }
+    
+    // 计算适合的缩放比例
+    let scaleRatio = (containerWidth - 40) / pageWidth; // 减去边距
+    scaleRatio = Math.min(Math.max(0.1, scaleRatio), 2.0); // 限制缩放范围
+    
+    // 应用缩放
+    zoom.value = scaleRatio;
+    editor.Canvas.setZoom(scaleRatio);
+    
+    console.log(`适应宽度: 容器=${containerWidth}px, 页面=${pageWidth}px, 缩放=${scaleRatio.toFixed(2)}`);
+  } catch (error) {
+    console.error('适应宽度失败', error);
   }
-});
+}
 
-watch(() => props.paperSize, (val) => {
-  if (editor) {
-    applyPaperSize(val);
-    setTimeout(() => fitToWidth(), 0);
+// 适应页面
+function fitToPage() {
+  if (!editor) return;
+  
+  try {
+    // 获取页面元素
+    const document = editor.Canvas.getDocument();
+    if (!document) return;
+    
+    const pageEl = document.querySelector('.page');
+    if (!pageEl) return;
+    
+    // 获取容器和页面尺寸
+    const containerWidth = editorContainer.value.clientWidth;
+    const containerHeight = editorContainer.value.clientHeight;
+    const pageWidth = pageEl.offsetWidth;
+    const pageHeight = pageEl.offsetHeight;
+    
+    if (containerWidth <= 0 || containerHeight <= 0 || pageWidth <= 0 || pageHeight <= 0) {
+      return;
+    }
+    
+    // 计算适合的缩放比例
+    const widthRatio = (containerWidth - 40) / pageWidth;
+    const heightRatio = (containerHeight - 40) / pageHeight;
+    let scaleRatio = Math.min(widthRatio, heightRatio);
+    scaleRatio = Math.min(Math.max(0.1, scaleRatio), 2.0);
+    
+    // 应用缩放
+    zoom.value = scaleRatio;
+    editor.Canvas.setZoom(scaleRatio);
+  } catch (error) {
+    console.error('适应页面失败', error);
   }
-});
+}
+
+// =====================================
+// 工具栏操作
+// =====================================
 
+// 插入令牌
 function insertToken(token) {
   if (!editor || !token) return;
-  const sel = editor.getSelected();
-  if (sel) {
-    try {
-      sel.append(token);
-    } catch(e) {
+  
+  try {
+    // 获取当前选中的组件
+    const selected = editor.getSelected();
+    
+    if (selected) {
+      // 将令牌添加到选中组件中
+      selected.append(token);
+    } else {
+      // 没有选中组件，添加到页面中
       editor.addComponents(token);
     }
-  } else {
-    editor.addComponents(token);
+  } catch (error) {
+    console.error('插入令牌失败', error);
   }
 }
 
-// 工具条动作
-function zoomIn(){ if (!editor) return; zoom.value = Math.min(400, zoom.value + 10); editor.Canvas.setZoom(zoom.value/100); }
-function zoomOut(){ if (!editor) return; zoom.value = Math.max(10, zoom.value - 10); editor.Canvas.setZoom(zoom.value/100); }
-function zoomReset(){ if (!editor) return; zoom.value = 100; editor.Canvas.setZoom(1); }
-function applyFontFamily(){ const sel = editor?.getSelected(); if (sel) sel.addStyle({ 'font-family': fontFamily.value }); }
-function applyFontSize(){ const sel = editor?.getSelected(); if (sel) sel.addStyle({ 'font-size': fontSize.value + 'px' }); }
-function applyFontColor(){ const sel = editor?.getSelected(); if (sel) sel.addStyle({ color: fontColor.value }); }
-function applyGrid(){
-  const gs = Math.max(5, gridSize.value || 10);
-  const doc = editor?.Canvas?.getDocument?.();
-  if (!doc) return;
-  if (showGrid.value) {
-    const size = gs;
-    const bg = `linear-gradient(to right, rgba(0,0,0,0.06) 1px, transparent 1px), linear-gradient(to bottom, rgba(0,0,0,0.06) 1px, transparent 1px)`;
-    doc.body.style.backgroundImage = bg;
-    doc.body.style.backgroundSize = `${size}px ${size}px`;
-  } else {
-    doc.body.style.backgroundImage = '';
-    doc.body.style.backgroundSize = '';
+// 缩放控制
+function zoomIn() {
+  if (!editor) return;
+  zoom.value = Math.min(3, zoom.value + 0.1);
+  editor.Canvas.setZoom(zoom.value);
+}
+
+function zoomOut() {
+  if (!editor) return;
+  zoom.value = Math.max(0.1, zoom.value - 0.1);
+  editor.Canvas.setZoom(zoom.value);
+}
+
+// 样式应用
+function applyFontSize() {
+  const selected = editor?.getSelected();
+  if (selected) {
+    selected.addStyle({ 'font-size': `${fontSize.value}px` });
   }
 }
 
-function getPageEl(){
-  const doc = editor?.Canvas?.getDocument?.();
-  if (!doc) return null;
-  return doc.querySelector('.page');
+function applyFontFamily() {
+  const selected = editor?.getSelected();
+  if (selected) {
+    selected.addStyle({ 'font-family': fontFamily.value });
+  }
 }
 
-function fitToWidth(){
-  console.log('尝试适配宽度');
-  if (!editor || !editorHost.value) {
-    console.warn('编辑器或容器未就绪');
-    return;
+function applyFontColor() {
+  const selected = editor?.getSelected();
+  if (selected) {
+    selected.addStyle({ 'color': fontColor.value });
   }
-  
-  // 尝试重新应用纸张尺寸，确保页面存在
-  applyPaperSize(props.paperSize);
-  
-  const pageEl = getPageEl();
-  if (!pageEl) {
-    console.warn('找不到.page元素，尝试重建');
-    // 最后的尝试：重置整个画布
-    try {
-      const frameEl = editor.Canvas.getFrameEl();
-      if (frameEl) {
-        const doc = frameEl.contentDocument;
-        if (doc && doc.body) {
-          // 强制创建页面容器
-          doc.body.innerHTML = '<div class="page" style="width:210mm;min-height:297mm;background:#fff;box-shadow:0 0 0 1px #dcdfe6,0 8px 24px rgba(0,0,0,0.12);padding:12mm;box-sizing:border-box;position:relative;margin:0 auto;">\u70b9击左侧区块或上方工具添加内容</div>';
-          console.log('强制重建了页面');
-          applyPaperSize(props.paperSize);
-        }
-      }
-    } catch (e) {
-      console.error('强制重建页面失败', e);
-    }
-    return;
+}
+
+// =====================================
+// 生命周期钩子
+// =====================================
+
+// 监听属性变化
+watch(() => props.paperSize, (newSize) => {
+  if (editor) {
+    applyPaperSize();
+    setTimeout(fitToWidth, 100);
   }
-  
-  // 先恢复原始缩放
-  const prev = editor.Canvas.getZoom();
-  editor.Canvas.setZoom(1);
-  
-  try {
-    // 测量容器和页面
-    const hostW = editorHost.value.clientWidth - 32; // padding
-    const pageRect = pageEl.getBoundingClientRect();
-    const pageW = pageRect.width;
-    
-    console.log('页面尺寸情况:', pageRect);
-    
-    if (pageW <= 10 || hostW <= 10) {
-      console.warn('页面或容器尺寸异常', {pageW, hostW});
-      editor.Canvas.setZoom(prev);
-      return;
-    }
-    
-    // 计算合适的比例
-    console.log('容器宽度:', hostW, '页面宽度:', pageW);
-    let ratio = hostW / pageW;
-    ratio = Math.max(0.2, Math.min(2.0, ratio));
-    console.log('设置缩放比例:', ratio);
-    zoom.value = Math.round(ratio * 100);
-    editor.Canvas.setZoom(ratio);
-    
-    // 检查缩放后效果
+});
+
+watch(() => editorHeight.value, (newHeight) => {
+  if (editor) {
+    editor.setHeight(`${newHeight}px`);
+  }
+});
+
+// 窗口调整大小处理
+const handleResize = () => {
+  if (editor) {
     setTimeout(() => {
-      try {
-        const newWidth = pageEl.getBoundingClientRect().width * ratio;
-        console.log('缩放后页面宽度:', newWidth, '目标宽度:', hostW);
-      } catch(e) {}
-    }, 10);
-  } catch(e) {
-    console.error('适配宽度时发生错误', e);
-    editor.Canvas.setZoom(prev); // 恢复原缩放
+      fitToWidth();
+    }, 100);
   }
-}
+};
 
-function fitToPage(){
-  if (!editor || !editorHost.value) return;
-  const pageEl = getPageEl();
-  if (!pageEl) return;
-  const prev = editor.Canvas.getZoom();
-  editor.Canvas.setZoom(1);
-  const hostW = editorHost.value.clientWidth - 32;
-  const hostH = editorHost.value.clientHeight - 32;
-  const rect = pageEl.getBoundingClientRect();
-  const pageW = rect.width;
-  const pageH = rect.height;
-  if (pageW > 0 && pageH > 0){
-    let ratio = Math.min(hostW / pageW, hostH / pageH);
-    ratio = Math.max(0.2, Math.min(2.0, ratio));
-    zoom.value = Math.round(ratio * 100);
-    editor.Canvas.setZoom(ratio);
-  } else {
-    editor.Canvas.setZoom(prev);
+// 组件挂载
+onMounted(async () => {
+  // 监听窗口大小变化
+  window.addEventListener('resize', handleResize);
+  
+  // 初始化编辑器
+  await initEditor();
+});
+
+// 组件卸载
+onBeforeUnmount(() => {
+  // 移除窗口大小变化监听
+  window.removeEventListener('resize', handleResize);
+  
+  // 销毁编辑器
+  if (editor) {
+    editor.destroy();
+    editor = null;
   }
-}
+});
 
-defineExpose({ insertToken });
+// 暴露方法给父组件
+defineExpose({
+  insertToken,
+  fitToWidth,
+  fitToPage
+});
 </script>
 
 <style scoped>
 .template-builder {
-  border: 1px solid #ebeef5;
+  display: flex;
+  flex-direction: column;
+  height: 100%;
+  border: 1px solid #e4e7ed;
   border-radius: 4px;
+  overflow: hidden;
+  background-color: #f5f7fa;
 }
+
 .builder-toolbar {
   display: flex;
   justify-content: space-between;
+  padding: 8px 12px;
+  background-color: #f5f7fa;
+  border-bottom: 1px solid #e4e7ed;
+  flex-shrink: 0;
+}
+
+.builder-toolbar .left {
+  display: flex;
+  align-items: center;
+  gap: 8px;
+}
+
+.builder-toolbar .right {
+  display: flex;
+  align-items: center;
+  gap: 4px;
+  flex-wrap: wrap;
+}
+
+.builder-toolbar .paper {
+  font-size: 12px;
+  color: #606266;
+}
+
+.builder-toolbar .toolbar-label {
+  font-size: 12px;
+  color: #606266;
+  margin: 0 4px;
+}
+
+.color-input {
+  width: 28px;
+  height: 28px;
+  padding: 0;
+  border: none;
+  background: transparent;
+  cursor: pointer;
+}
+
+.builder-main-area {
+  display: flex;
+  flex-grow: 1;
+  overflow: hidden;
+  position: relative;
+  height: calc(100% - 46px); /* 减去工具栏高度 */
+}
+
+.builder-sidebar {
+  width: 240px;
+  flex-shrink: 0;
+  border-right: 1px solid #e4e7ed;
+  overflow-y: auto;
+  background-color: #ffffff;
+}
+
+.blocks-panel {
+  height: 100%;
+  overflow-y: auto;
+  padding: 8px;
+}
+
+.builder-canvas-container {
+  flex-grow: 1;
+  position: relative;
+  display: flex;
+  flex-direction: column;
+  overflow: hidden;
+}
+
+.editor-container {
+  flex-grow: 1;
+  overflow: hidden;
+  position: relative;
+}
+
+.canvas-height-control {
+  display: flex;
+  align-items: center;
+  padding: 8px 16px;
+  background-color: #f5f7fa;
+  border-top: 1px solid #e4e7ed;
+  font-size: 12px;
+  color: #606266;
   gap: 8px;
+}
+
+/* 状态覆盖层 */
+.editor-status-overlay {
+  position: absolute;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  background-color: rgba(255, 255, 255, 0.9);
+  z-index: 100;
+}
+
+.status-content {
+  max-width: 500px;
+  padding: 24px;
+  text-align: center;
+}
+
+/* 加载动画 */
+.loading-overlay .spinner {
+  width: 40px;
+  height: 40px;
+  margin: 0 auto 16px;
+  border: 4px solid rgba(0, 0, 0, 0.1);
+  border-left-color: #409eff;
+  border-radius: 50%;
+  animation: spin 1s linear infinite;
+}
+
+@keyframes spin {
+  to { transform: rotate(360deg); }
+}
+
+/* 错误样式 */
+.error-overlay {
+  color: #cf1322;
+}
+
+.error-overlay .error-icon {
+  font-size: 32px;
+  font-weight: bold;
+  margin-bottom: 16px;
+  display: flex;
   align-items: center;
-  padding: 6px 8px;
-  border-bottom: 1px solid #ebeef5;
-  background: #fafafa;
-}
-.builder-toolbar .paper { margin-left: 8px; color: #909399; font-size: 12px; }
-.builder-toolbar .toolbar-label { color:#606266; font-size:12px; margin: 0 6px; }
-.color-input { width: 28px; height: 28px; border: none; background: transparent; padding: 0; }
-.gjs-editor-host { background: #f5f7fa; position: relative; overflow: hidden; }
-.builder-body { display: flex; gap: 8px; padding: 8px; min-height: 640px; }
-.builder-body .side { width: 260px; min-width: 240px; border-right: 1px solid #ebeef5; }
-.builder-body .main { flex: 1; position: relative; display: flex; flex-direction: column; min-height: 640px; }
-.blocks-host { overflow: auto; background: #fafafa; border: 1px solid #ebeef5; border-radius: 4px; height: 100%; }
-.gjs-editor-host { position: relative; z-index: 1; }
-/* 确保画布层可交互，避免外层面板遮挡 */
-.gjs-cv-canvas, .gjs-frame, .gjs-editor { pointer-events: auto; }
-
-/* 增强编辑器画布可见性 */
-.gjs-editor { width: 100% !important; height: 100% !important; }
-.gjs-cv-canvas { width: 100% !important; height: 100% !important; top: 0 !important; }
-.gjs-frame-wrapper { padding: 10px !important; }
-.gjs-frame { transform-origin: left top; }
-.height-slider { margin-top: 6px; display:flex; align-items:center; gap:8px; color:#606266; }
-.loading { padding: 12px; color: #909399; font-size: 13px; }
-.load-error { padding: 12px; background: #fff7e6; border: 1px solid #ffe58f; border-radius: 4px; color: #ad6800; }
-.load-error code { background: #f0f0f0; padding: 1px 4px; border-radius: 3px; }
+  justify-content: center;
+  width: 60px;
+  height: 60px;
+  border-radius: 50%;
+  background-color: #fff2f0;
+  border: 2px solid #ffccc7;
+  margin: 0 auto 16px;
+}
+
+.error-overlay h3 {
+  margin-bottom: 12px;
+  font-size: 18px;
+}
+
+.error-overlay ul {
+  text-align: left;
+  margin: 16px 0;
+  padding-left: 20px;
+}
+
+.error-overlay code {
+  background-color: #f5f5f5;
+  padding: 2px 4px;
+  border-radius: 3px;
+  font-family: monospace;
+}
 </style>
+
+<style>
+/* 全局样式，确保GrapesJS编辑器元素可见且可交互 */
+.gjs-cv-canvas {
+  width: 100% !important;
+  height: 100% !important;
+  top: 0 !important;
+}
+
+.gjs-frame-wrapper {
+  padding: 16px !important;
+}
+
+.gjs-frame {
+  transform-origin: top left;
+}
+
+/* 确保编辑器中的所有画布元素可交互 */
+.gjs-cv-canvas, .gjs-pn-panels, .gjs-editor {
+  pointer-events: auto !important;
+}
+
+/* 编辑器内的目标区域样式 */
+.gjs-toolbar {
+  background-color: #444 !important;
+}
+
+.gjs-badge {
+  background-color: #409eff !important;
+}
+
+.gjs-highlighter, .gjs-highlighter-sel {
+  outline: 2px solid #409eff !important;
+  outline-offset: 1px;
+}
+
+/* 修复区块拖拽预览 */
+.gjs-block__media {
+  margin-bottom: 5px;
+}
+</style>
\ No newline at end of file
-- 
2.51.0.windows.1

